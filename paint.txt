#include <X11/Xlib.h>
#include <X11/Xutil.h>
#include <X11/Xos.h>
#include <stdio.h>
#include <stdlib.h>

#define INITIAL_WIDTH 1280
#define INITIAL_HEIGHT 1024
#define BUTTON_WIDTH 50
#define BUTTON_HEIGHT 30
#define BUTTON_GAP 5 
#define SIZE_BUTTON_X_OFFSET (4 * BUTTON_WIDTH + 5 * BUTTON_GAP)

typedef struct Point {
    int x, y;
    unsigned long color;
    int size;
    int flag; // 1 - начало линии, 0 - продолжение
    struct Point* next;
} Point;

Point* points = NULL;
int current_width = INITIAL_WIDTH;
int current_height = INITIAL_HEIGHT;

void addPoint(int x, int y, unsigned long color, int size, int flag) {
    Point* new_point = (Point*)malloc(sizeof(Point));
    if (!new_point) {
        printf("Memory allocation failed\n");
        return;
    }
    new_point->x = x;
    new_point->y = y;
    new_point->color = color;
    new_point->size = size;
    new_point->flag = flag;
    new_point->next = points;
    points = new_point;
}

void redrawLines(Display* display, Window window, GC gc) {
    Point* current = points;
    Point* prev = NULL;
    
    while (current != NULL) {
        if (prev != NULL && !current->flag) { // Соединяем только точки одной линии
            XSetForeground(display, gc, current->color);
            XSetLineAttributes(display, gc, current->size, LineSolid, CapRound, JoinRound);
            XDrawLine(display, window, gc, prev->x, prev->y, current->x, current->y);
        }
        prev = current;
        current = current->next;
    }
}

void drawButtons(Display* display, Window window, GC gc, int pressed_button, int is_color_button) {
    unsigned long colors[4] = {0x00FFFF, 0xFF00FF, 0xFFFF00, 0x000000};
    
    for (int i = 0; i < 4; i++) {
        int x = i * (BUTTON_WIDTH + BUTTON_GAP);
        XSetForeground(display, gc, colors[i]);
        XFillRectangle(display, window, gc, x, 0, BUTTON_WIDTH, BUTTON_HEIGHT);
        if (pressed_button == i && is_color_button) {
            XSetForeground(display, gc, 0x808080);
            XFillRectangle(display, window, gc, x + 2, 2, BUTTON_WIDTH - 4, BUTTON_HEIGHT - 4);
        }
        XSetForeground(display, gc, 0x000000);
        XDrawRectangle(display, window, gc, x, 0, BUTTON_WIDTH, BUTTON_HEIGHT);
    }
    
    for (int i = 0; i < 3; i++) {
        int x = SIZE_BUTTON_X_OFFSET + i * (BUTTON_WIDTH + BUTTON_GAP);
        XSetForeground(display, gc, 0x808080);
        XFillRectangle(display, window, gc, x, 0, BUTTON_WIDTH, BUTTON_HEIGHT);
        if (pressed_button == i && !is_color_button) {
            XSetForeground(display, gc, 0x404040);
            XFillRectangle(display, window, gc, x + 2, 2, BUTTON_WIDTH - 4, BUTTON_HEIGHT - 4);
        }
        XSetForeground(display, gc, 0x000000);
        XDrawRectangle(display, window, gc, x, 0, BUTTON_WIDTH, BUTTON_HEIGHT);
        char size_str[3]; // Увеличили до 3 байт для "10" + '\0'
        sprintf(size_str, "%d", (i == 0) ? 2 : (i == 1) ? 5 : 10);
        XDrawString(display, window, gc, x + 20, 20, size_str, strlen(size_str));
    }
}

int main(int argc, char *argv[]) {
    Display* display = XOpenDisplay(NULL);
    if (!display) {
        printf("Cannot connect to X server\n");
        exit(1);
    }

    int screen = DefaultScreen(display);
    Window window = XCreateSimpleWindow(display, RootWindow(display, screen),
        0, 0, INITIAL_WIDTH, INITIAL_HEIGHT, 1,
        BlackPixel(display, screen), WhitePixel(display, screen));
    unsigned long colors[4] = {0x00FFFF, 0xFF00FF, 0xFFFF00, 0x000000};
    unsigned long current_color = colors[0];
    int current_size = 1;

    XSelectInput(display, window, 
        ExposureMask | ButtonPressMask | ButtonReleaseMask | 
        PointerMotionMask | KeyPressMask | StructureNotifyMask);

    XGrabPointer(display, window, True, 
        ButtonPressMask | ButtonReleaseMask | PointerMotionMask,
        GrabModeAsync, GrabModeAsync, window, None, CurrentTime);

    XMapWindow(display, window);
    GC gc = XCreateGC(display, window, 0, NULL);

    XEvent event;
    int drawing = 0;
    int pressed_button = -1;
    int is_color_button = 0;
    int last_x = 0, last_y = 0;

    while (1) {
        XNextEvent(display, &event);

        switch (event.type) {
            case ConfigureNotify:
                current_width = event.xconfigure.width;
                current_height = event.xconfigure.height;
                redrawLines(display, window, gc); 
                break;

            case Expose:
                drawButtons(display, window, gc, -1, 0);
                redrawLines(display, window, gc);
                break;

            case ButtonPress:
                if (event.xbutton.y < BUTTON_HEIGHT) {
                    if (event.xbutton.x < SIZE_BUTTON_X_OFFSET) {
                        int button = event.xbutton.x / (BUTTON_WIDTH + BUTTON_GAP);
                        if (event.xbutton.x < (button + 1) * (BUTTON_WIDTH + BUTTON_GAP) - BUTTON_GAP && 
                            button >= 0 && button < 4) {
                            current_color = colors[button];
                            pressed_button = button;
                            is_color_button = 1;
                            drawButtons(display, window, gc, pressed_button, is_color_button);
                        }
                    }
                    else if (event.xbutton.x >= SIZE_BUTTON_X_OFFSET && 
                             event.xbutton.x < SIZE_BUTTON_X_OFFSET + 3 * (BUTTON_WIDTH + BUTTON_GAP)) {
                        int size_button = (event.xbutton.x - SIZE_BUTTON_X_OFFSET) / (BUTTON_WIDTH + BUTTON_GAP);
                        if (event.xbutton.x < SIZE_BUTTON_X_OFFSET + (size_button + 1) * (BUTTON_WIDTH + BUTTON_GAP) - BUTTON_GAP) {
                            if      (size_button == 0) current_size = 2;
                            else if (size_button == 1) current_size = 5;
                            else if (size_button == 2) current_size = 10;
                            pressed_button = size_button;
                            is_color_button = 0;
                            drawButtons(display, window, gc, pressed_button, is_color_button);
                        }
                    }
                } else {
                    drawing = 1;
                    last_x = event.xbutton.x;
                    last_y = event.xbutton.y;
                    addPoint(last_x, last_y, current_color, current_size, 1);
                }
                break;

            case ButtonRelease:
                if (pressed_button != -1) {
                    pressed_button = -1;
                    drawButtons(display, window, gc, -1, 0);
                }
                drawing = 0;
                break;

            case MotionNotify:
                if (drawing) {
                    XSetForeground(display, gc, current_color);
                    XSetLineAttributes(display, gc, current_size, LineSolid, CapRound, JoinRound);
                    XDrawLine(display, window, gc, last_x, last_y, event.xmotion.x, event.xmotion.y);
                    addPoint(event.xmotion.x, event.xmotion.y, current_color, current_size, 0);
                    last_x = event.xmotion.x;
                    last_y = event.xmotion.y;
                }
                break;

            case KeyPress:
                if (XLookupKeysym(&event.xkey, 0) == XK_Escape) {
                    Point* current = points;
                    while (current != NULL) {
                        Point* temp = current;
                        current = current->next;
                        free(temp);
                    }
                    points = NULL;
                    XClearWindow(display, window);
                }
                else if (XLookupKeysym(&event.xkey, 0) == XK_q) {
                    XFreeGC(display, gc);
                    XCloseDisplay(display);
                    return 0;
                }
                break;
        }
        XFlush(display);
    }
}