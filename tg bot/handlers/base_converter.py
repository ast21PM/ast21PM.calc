import re
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, filters

WAITING_FOR_NUMBER, WAITING_FOR_FROM_BASE, WAITING_FOR_TO_BASE = range(3)

def int_to_base(n, base):
    digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    if n == 0:
        return "0"
    sign = ""
    if n < 0:
        sign = "-"
        n = -n
    res = ""
    while n > 0:
        res = digits[n % base] + res
        n //= base
    return sign + res

def escape_md(text):
    return re.sub(r'([_\*\[\]()~`>#+\-=|{}.!\\])', r'\\\1', str(text))

async def base_converter_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–ù–∞–∑–∞–¥", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text(
        "üî¢ *–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞* \\(–Ω–∞–ø—Ä–∏–º–µ—Ä: 1011, 1A, 255\\):",
        reply_markup=reply_markup,
        parse_mode='MarkdownV2'
    )
    context.user_data.clear()
    return WAITING_FOR_NUMBER

async def handle_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text.lower() == "–Ω–∞–∑–∞–¥":
        keyboard = [["–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"], ["–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"], ["–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç"], ["–°–∏—Å—Ç–µ–º–∞ —Å—á–∏—Å–ª–µ–Ω–∏—è"], ["–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
        await update.message.reply_text("üè† –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –≥–ª–∞–≤–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É.", reply_markup=reply_markup)
        return ConversationHandler.END
    if text.lower() == "–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        return await handle_back_or_restart(update, context, text)
    context.user_data['number'] = text
    # –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è
    keyboard = [["2", "8"], ["10", "16"], ["–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å–∏—Å—Ç–µ–º—É —Å—á–∏—Å–ª–µ–Ω–∏—è"], ["–ù–∞–∑–∞–¥", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"]]
    await update.message.reply_text(
        "üî¢ *–í–≤–µ–¥–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å—á–∏—Å–ª–µ–Ω–∏—è* \\(2\\-36\\):",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        parse_mode='MarkdownV2'
    )
    return WAITING_FOR_FROM_BASE

async def handle_from_base(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text.lower() == "–Ω–∞–∑–∞–¥":
        keyboard = [["–ù–∞–∑–∞–¥", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "üî¢ *–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞* \\(–Ω–∞–ø—Ä–∏–º–µ—Ä: 1011, 1A, 255\\):",
            reply_markup=reply_markup,
            parse_mode='MarkdownV2'
        )
        return WAITING_FOR_NUMBER
    if text.lower() == "–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        return await handle_back_or_restart(update, context, text)
    try:
        base = int(text)
        if not (2 <= base <= 36):
            raise ValueError
        context.user_data['from_base'] = base
        # –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ü–µ–ª–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è
        keyboard = [["2", "8"], ["10", "16"], ["–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å–∏—Å—Ç–µ–º—É —Å—á–∏—Å–ª–µ–Ω–∏—è"], ["–ù–∞–∑–∞–¥", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"]]
        await update.message.reply_text(
            "üéØ *–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å—á–∏—Å–ª–µ–Ω–∏—è* \\(2\\-36\\):",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
            parse_mode='MarkdownV2'
        )
        return WAITING_FOR_TO_BASE
    except ValueError:
        # –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è
        keyboard = [["2", "8"], ["10", "16"], ["–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å–∏—Å—Ç–µ–º—É —Å—á–∏—Å–ª–µ–Ω–∏—è"], ["–ù–∞–∑–∞–¥", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"]]
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 2 –¥–æ 36\\.",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
            parse_mode='MarkdownV2'
        )
        return WAITING_FOR_FROM_BASE

async def handle_to_base(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text.lower() == "–Ω–∞–∑–∞–¥":
        # –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è
        keyboard = [["2", "8"], ["10", "16"], ["–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å–∏—Å—Ç–µ–º—É —Å—á–∏—Å–ª–µ–Ω–∏—è"], ["–ù–∞–∑–∞–¥", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "üî¢ *–í–≤–µ–¥–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å—á–∏—Å–ª–µ–Ω–∏—è* \\(2\\-36\\):",
            reply_markup=reply_markup,
            parse_mode='MarkdownV2'
        )
        return WAITING_FOR_FROM_BASE
    if text.lower() == "–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        return await handle_back_or_restart(update, context, text)
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å–∏—Å—Ç–µ–º—É —Å—á–∏—Å–ª–µ–Ω–∏—è', –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é
    if text == "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å–∏—Å—Ç–µ–º—É —Å—á–∏—Å–ª–µ–Ω–∏—è":
        await update.message.reply_text(
            "üéØ *–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å—á–∏—Å–ª–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é* \\(2\\-36\\):",
            reply_markup=ReplyKeyboardMarkup([["–ù–∞–∑–∞–¥", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"]], resize_keyboard=True),
            parse_mode='MarkdownV2'
        )
        return WAITING_FOR_TO_BASE
    try:
        to_base = int(text)
        if not (2 <= to_base <= 36):
            raise ValueError
        
        number = context.user_data['number']
        from_base = context.user_data['from_base']
        sign = -1 if number.startswith('-') else 1
        num_str = number[1:] if sign == -1 else number
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_parts = []
        message_parts.append(f"üîÅ *–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è*: `{number}` \\(base {from_base}\\) ‚Üí `{to_base}`")

        # –ü–µ—Ä–µ–≤–æ–¥ –≤ –¥–µ—Å—è—Ç–∏—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        if from_base != 10:
            message_parts.append("\nüìä *–®–∞–≥ 1: –ü–µ—Ä–µ–≤–æ–¥ –≤ –¥–µ—Å—è—Ç–∏—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É*")
            value = 0
            num_list = list(num_str)[::-1]  # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ
            # –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º
            table = [
                "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê",
                "‚îÇ –†–∞–∑—Ä—è–¥ ‚îÇ –§–æ—Ä–º—É–ª–∞        ‚îÇ –°—Ç–µ–ø–µ–Ω—å      ‚îÇ –†–µ–∑—É–ª—å—Ç–∞—Ç  ‚îÇ",
                "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§"
            ]
            for i, digit in enumerate(num_list):
                dval = int(digit, 36)
                power = i
                contribution = dval * (from_base ** power)
                value += contribution
                table.append(f"‚îÇ {str(i+1).ljust(7)}‚îÇ {(str(dval)+'√ó'+str(from_base)+'^'+str(power)).ljust(15)}‚îÇ {(str(from_base)+'^'+str(power)).ljust(12)}‚îÇ {str(contribution).ljust(10)}‚îÇ")
            table.append("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
            # –§–æ—Ä–º—É–ª–∞ —Å—É–º–º—ã
            sum_formula = ' + '.join([f'{int(d,36)}√ó{from_base}^{i}' for i, d in enumerate(num_list)])
            table.append(f"\nüî∏ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {sum_formula}")
            table.append(f"üî∏ –°—É–º–º–∞: {value} \\(—Å —É—á–µ—Ç–æ–º –∑–Ω–∞–∫–∞: {sign * value}\\)")
            message_parts.append('```\n' + '\n'.join(table) + '\n```')
        else:
            value = int(num_str) * sign
            message_parts.append(f"\nüîπ –ß–∏—Å–ª–æ —É–∂–µ –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ: `{value}`")

        # –ü–µ—Ä–µ–≤–æ–¥ –≤ —Ü–µ–ª–µ–≤—É—é —Å–∏—Å—Ç–µ–º—É (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        if to_base != 10:
            message_parts.append("\nüîÑ *–®–∞–≥ 2: –ü–µ—Ä–µ–≤–æ–¥ –≤ —Ü–µ–ª–µ–≤—É—é —Å–∏—Å—Ç–µ–º—É*")
            n = abs(value)
            steps = []
            results = []
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–µ–ª–µ–Ω–∏—è
            table = ["‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê",
                     "‚îÇ –î–µ–ª–∏–º–æ–µ / –û—Å–Ω–æ–≤–∞–Ω–∏–µ  ‚îÇ –¶–µ–ª–æ–µ —á–∞—Å—Ç–Ω–æ–µ     ‚îÇ –û—Å—Ç–∞—Ç–æ–∫  ‚îÇ",
                     "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§"]
            
            while n > 0:
                quotient = n // to_base
                remainder = n % to_base
                table.append(f"‚îÇ {n} / {to_base:<10} ‚îÇ {quotient:<17} ‚îÇ {remainder:<8} ‚îÇ")
                results.append(str(remainder))
                n = quotient
                steps.append(f"{n} * {to_base} + {remainder}")

            table.append("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
            message_parts.append('```\n' + '\n'.join(table) + '\n```')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_str = ''.join([str(int_to_base(int(x), to_base)) for x in reversed(results)])
            result = ('-' if value < 0 else '') + result_str
        else:
            result = str(value)
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        message_parts.append("\n‚úÖ *–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:*")
        message_parts.append(f"```\n{number} (base {from_base}) = {result} (base {to_base})\n```")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            '\n'.join(message_parts),
            reply_markup=ReplyKeyboardMarkup([["–ù–∞–∑–∞–¥", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"]], resize_keyboard=True),
            parse_mode='MarkdownV2'
        )
        return WAITING_FOR_NUMBER
        
    except ValueError as e:
        error_msg = [
            "‚ö†Ô∏è *–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏!*",
            "‚ñ´Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:",
            f"‚ñ´Ô∏è –ß–∏—Å–ª–æ: `{context.user_data.get('number', '?')}`",
            f"‚ñ´Ô∏è –ò—Å—Ö–æ–¥–Ω–∞—è –°–°: `{context.user_data.get('from_base', '?')}`",
            f"‚ñ´Ô∏è –¶–µ–ª–µ–≤–∞—è –°–°: `{to_base}`",
            "_–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:_",
            "1. –¶–∏—Ñ—Ä—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∏—Å—Ö–æ–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Å—á–∏—Å–ª–µ–Ω–∏—è",
            "2. –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –≤ –Ω–µ–¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö",
            "3. –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —á–∏—Å–ª–µ"
        ]
        await update.message.reply_text(
            '\n'.join(error_msg),
            parse_mode='MarkdownV2'
        )
        return WAITING_FOR_TO_BASE

async def handle_back_or_restart(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    if text.lower() == "–Ω–∞–∑–∞–¥":
        keyboard = [["–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"], ["–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"], ["–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç"], ["–°–∏—Å—Ç–µ–º–∞ —Å—á–∏—Å–ª–µ–Ω–∏—è"], ["–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
        await update.message.reply_text("üè† –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –≥–ª–∞–≤–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É.", reply_markup=reply_markup)
        return ConversationHandler.END
    elif text.lower() == "–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        context.user_data.clear()
        keyboard = [["–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"], ["–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"], ["–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç"], ["–°–∏—Å—Ç–µ–º–∞ —Å—á–∏—Å–ª–µ–Ω–∏—è"], ["–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
        await update.message.reply_text("üîÑ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.", reply_markup=reply_markup)
        return ConversationHandler.END

base_converter_handler = ConversationHandler(
    entry_points=[CommandHandler("base", base_converter_start), 
                  MessageHandler(filters.Regex("^(–°–∏—Å—Ç–µ–º–∞ —Å—á–∏—Å–ª–µ–Ω–∏—è)$"), base_converter_start)],
    states={
        WAITING_FOR_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_number)],
        WAITING_FOR_FROM_BASE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_from_base)],
        WAITING_FOR_TO_BASE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_to_base)],
    },
    fallbacks=[]
)