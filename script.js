// –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞
let display = document.getElementById('display');
// –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
let calculator = document.querySelector('.calculator');
// –ü–æ–ª—É—á–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
let themeToggle = document.getElementById('themeToggle');

function append(value) {
    // –†–∞–∑—Ä–µ—à–∞–µ–º –≤–≤–æ–¥ —Ñ—É–Ω–∫—Ü–∏–π, —á–∏—Å–µ–ª, –æ–ø–µ—Ä–∞—Ü–∏–π –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    if (/[\d+\-*/.()]/.test(value) || ['sin', 'cos', 'tan', 'cot', 'sqrt', 'square', 'arcsin', 'arccos', 'œÄ', 'i'].includes(value)) {
        if (['sin', 'cos', 'tan', 'cot', 'sqrt', 'arcsin', 'arccos'].includes(value)) {
            display.value += value + '('; // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–æ–π
        } else if (value === 'square') {
            display.value += '^2'; // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ –∫–≤–∞–¥—Ä–∞—Ç, –∫–∞–∫ –≤ Desmos
        } else {
            display.value += value;
        }
    }
}

// –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
function clearDisplay() {
    display.value = '';
}

// –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ
function calculate(operation) {
    let expression = display.value.trim();
    let result;

    try {
        if (operation === '=') {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è œÄ –∏ i –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è
            expression = expression.replace(/œÄ/g, Math.PI).replace(/i/g, 'i').replace(/\^2/g, '**2'); // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ x¬≤ –∫–∞–∫ **2
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏—é
            if (['sin(', 'cos(', 'tan(', 'cot(', 'sqrt(', 'arcsin(', 'arccos('].some(func => expression.includes(func))) {
                let funcMatch = expression.match(/([a-z]+)\(([\d+\-*.]+)\)/i); // –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏ —á–∏—Å–ª–æ –≤ —Å–∫–æ–±–∫–∞—Ö
                if (funcMatch) {
                    let func = funcMatch[1].toLowerCase();
                    let number = parseFloat(funcMatch[2]) || 0;
                    switch (func) {
                        case 'sin': result = Math.sin(toRadians(number)); break;
                        case 'cos': result = Math.cos(toRadians(number)); break;
                        case 'tan': result = Math.tan(toRadians(number)); break;
                        case 'cot': result = 1 / Math.tan(toRadians(number)) || 0; break;
                        case 'sqrt': result = Math.sqrt(number); break;
                        case 'arcsin': result = toDegrees(Math.asin(number)); break;
                        case 'arccos': result = toDegrees(Math.acos(number)); break;
                        default: result = eval(expression); // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º eval
                    }
                } else {
                    result = eval(expression); // –ï—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –ø—Ä–æ–±—É–µ–º –≤—ã—á–∏—Å–ª–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å
                }
            } else {
                result = eval(expression); // –û–±—ã—á–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ
            }
        } else {
            let input = parseFloat(expression.replace(/œÄ/g, Math.PI).replace(/\^2/g, '**2')) || 0;
            switch (operation) {
                case 'square': result = input * input; break;
                case 'sqrt': result = Math.sqrt(input); break;
                default: result = '–û—à–∏–±–∫–∞';
            }
        }
        display.value = isNaN(result) || !isFinite(result) ? '–û—à–∏–±–∫–∞' : result;
    } catch (error) {
        display.value = '–û—à–∏–±–∫–∞';
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –∏–∫–æ–Ω–∫–∏
function toggleTheme() {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    let body = document.body;
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
    let calc = document.querySelector('.calculator');
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    let displayInput = document.getElementById('display');
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
    let buttons = document.querySelectorAll('button');

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è —Å–º–µ–Ω—ã —Ç–µ–º—ã
    body.classList.toggle('light');
    calc.classList.toggle('light');
    displayInput.classList.toggle('light');
    buttons.forEach(button => button.classList.toggle('light'));

    // –ú–µ–Ω—è–µ–º –∏–∫–æ–Ω–∫—É –∫–Ω–æ–ø–∫–∏ —Ç–µ–º—ã
    if (body.classList.contains('light')) {
        themeToggle.textContent = 'üåû'; // –°–æ–ª–Ω—Ü–µ –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
    } else {
        themeToggle.textContent = 'üåô'; // –ü–æ–ª—É–º–µ—Å—è—Ü –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
    }
}

// –§–∏–∫—Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–∏—Ñ—Ä –∏ —Ä–∞–±–æ—Ç—ã Backspace
display.addEventListener('keydown', (event) => {
    if (event.key === 'Enter') {
        event.preventDefault();
        calculate('=');
    } else if (event.key === 'Backspace' || event.key === 'ArrowLeft' || event.key === 'ArrowRight') {
        return; // –ü–æ–∑–≤–æ–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    } else if (!/[0-9+\-*/.()œÄi]/.test(event.key)) {
        event.preventDefault(); // –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    }
});

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≥—Ä–∞–¥—É—Å–æ–≤ –≤ —Ä–∞–¥–∏–∞–Ω—ã
function toRadians(degrees) {
    return degrees * Math.PI / 180;
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ä–∞–¥–∏–∞–Ω –≤ –≥—Ä–∞–¥—É—Å—ã
function toDegrees(radians) {
    return radians * 180 / Math.PI;
}